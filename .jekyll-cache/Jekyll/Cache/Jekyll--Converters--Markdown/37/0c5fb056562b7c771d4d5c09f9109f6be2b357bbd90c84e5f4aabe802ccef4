I"˜<p><a href="https://pixabay.com/en/books-pages-story-stories-notes-1245690/" target="_blank">
    <img src="/images/posts/notes.jpg" class="center" />
</a></p>

<blockquote>
  <p>Bu bir kendime not yazÄ±sÄ±dÄ±r. Daha sonradan unutma ihtimalime karÅŸÄ±n kendimce notlar alÄ±yorum.</p>
</blockquote>

<h3 id="giriÅŸ">GiriÅŸ</h3>

<p>C# Ã¼zerinde sevdiÄŸim bir baÅŸka Ã¶zellik, zarif kullanÄ±mlarÄ± aÃ§Ä±sÄ±ndan <strong><em>Generic Classes</em></strong> kavramÄ±. Bu tarz sÄ±nÄ±flar belirli iÅŸlemlerin gerÃ§ekleÅŸtirilmesini, belirli sabit veri tÃ¼rlerinden baÄŸÄ±msÄ±z olarak yapmaya yarÄ±yor. Bu yazÄ± Ã¼zerinde de unutmak istemediÄŸim bazÄ± kullanÄ±mlarÄ± not almayÄ± istiyorum.</p>

<h3 id="uygulama">Uygulama</h3>

<pre><code class="language-csharp">
public class Test 
{

    public void Process&lt; T &gt;()
    {
        Type type = typeof(T);
        MyCustomType instance = (MyCustomType)Activator.CreateInstance(type);
    }

    public void Run()
    {
        Process&lt; MyCustomType &gt;();
    }

}
</code></pre>

<ul>
  <li><strong>Process</strong> metodu tanÄ±mÄ±nda nasÄ±l Generic Class alabileceÄŸimizi ve metodun iÃ§erisinde de (Generic Class konusundan baÄŸÄ±msÄ±z olarak) nasÄ±l bir type iÃ§in yeni bir instance oluÅŸturabileceÄŸimizi gÃ¶rÃ¼yoruz.</li>
  <li><strong>Run</strong> metodu iÃ§erisinde de Generic Class tanÄ±mÄ± iÃ§eren bir metodu nasÄ±l Ã§aÄŸÄ±rabileceÄŸimizin Ã¶rneÄŸi bulunmaktadÄ±r.</li>
</ul>
:ET