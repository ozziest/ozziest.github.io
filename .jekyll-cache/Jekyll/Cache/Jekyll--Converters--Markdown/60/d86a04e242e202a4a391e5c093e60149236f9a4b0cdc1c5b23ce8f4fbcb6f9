I"C
<p><a href="https://pixabay.com/en/books-pages-story-stories-notes-1245690/" target="_blank">
    <img src="/images/posts/notes.jpg" class="center" />
</a></p>

<blockquote>
  <p>In case I forget later, this is a simple note for me.</p>
</blockquote>

<h3 id="introduction">Introduction</h3>

<p>I love to play with ConvertAll method which List object has. Today, I have noticed that how I hate dynamic type variables. First of all, C# is a strongly typed language and these kind of languages have good benefits such as writing unbreakable application. Of course if you donâ€™t use dynamic type variables. When I realized that, I have converted my dynamic list to dictionary list and this my note about it.</p>

<h3 id="example">Example</h3>

<blockquote>
  <p>This code has been updated because of a <a href="https://github.com/ozziest/ozziest.github.io/issues/1">suggestion</a> giving by <a href="https://github.com/mikependon">mikependon</a>. You might find the details in the <a href="https://github.com/ozziest/ozziest.github.io/issues/1">issue</a>.</p>
</blockquote>

<pre><code class="language-csharp">
using System;
using System.Collections.Generic;
using System.Reflection;

namespace ConsoleApplication
{
    class Program
    {
        static void Main(string[] args)
        {

            List&lt; dynamic&gt; source = new List&lt; dynamic&gt;()
            {
                new { id = 1, name = "Marlon Brando" }
            };

            List&lt; Dictionary&lt; string, dynamic&gt;&gt; result = source.ConvertAll(
                new Converter&lt; dynamic, Dictionary&lt; string, dynamic&gt;&gt;(DynamicToDictionaryConverter)
            );
        }

        public static Dictionary&lt; string, dynamic&gt; DynamicToDictionaryConverter(dynamic item)
        {
            if (IsDictionary(item))
            {
                return (Dictionary&lt; string, dynamic&gt;)item;
            }            
            
            Dictionary&lt; string, dynamic&gt; newItem = new Dictionary&lt; string, dynamic&gt;();
            PropertyInfo[] props = item.GetType().GetProperties();
            foreach (PropertyInfo prop in props)
            {
                newItem.Add(prop.Name, prop.GetValue(item, null)); 

            }
            return newItem;
        }

        public static bool IsDictionary(object o)
        {
            if (o == null) return false;
            return o is IDictionary &amp;&amp;
                   o.GetType().IsGenericType &amp;&amp;
                   o.GetType().GetGenericTypeDefinition().IsAssignableFrom(typeof(Dictionary&lt;,&gt;));
        }

    }
}
</code></pre>
:ET