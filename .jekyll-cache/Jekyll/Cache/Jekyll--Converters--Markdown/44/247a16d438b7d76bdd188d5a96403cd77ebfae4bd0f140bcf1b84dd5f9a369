I"R<p><a href="https://pixabay.com/en/books-pages-story-stories-notes-1245690/" target="_blank">
    <img src="/images/posts/notes.jpg" class="center" />
</a></p>

<blockquote>
  <p>Bu bir kendime not yazÄ±sÄ±dÄ±r. Daha sonradan unutma ihtimalime karÅŸÄ±n kendimce notlar alÄ±yorum.</p>
</blockquote>

<h3 id="giriÅŸ">GiriÅŸ</h3>

<p>Windows Hizmetleri, Windows iÅŸletim sistemi Ã¼zerine koÅŸan ve Hizmetlet ekranÄ± aracÄ±lÄ±ÄŸÄ± ile yÃ¶netebildiÄŸimiz bir ekran. Arka planda Ã§alÄ±ÅŸan ve bir arayÃ¼ze sahip olmayan bu uygulamalarÄ±, dilerseniz el yordamÄ±yla, dilerseniz otomatik olarak baÅŸlatabiliyorsunuz.</p>

<p>Benim de bir ihtiyaÃ§ Ã¼zerine arka planda sÃ¼rekli olarak Ã§alÄ±ÅŸacak bir REST API Ã§alÄ±ÅŸtÄ±rma zaruretim oluÅŸtu. Bu notu da Ã¼zerinde unutmamak adÄ±na alÄ±yorum.</p>

<h3 id="gereksinimler">Gereksinimler</h3>

<p>SÃ¶z konusu Windows Servisi olduÄŸu iÃ§in, Windows iÅŸletim sistemine sahip olan bir bilgisayar ve Visual Studio gereksinimlerimizi oluÅŸturuyor.</p>

<h3 id="uygulama">Uygulama</h3>

<ul>
  <li>Visual Studio ile yeni proje oluÅŸturma ekranÄ±nan <code class="language-plaintext highlighter-rouge">Windows Service</code> seÃ§ilir.</li>
  <li><a href="https://www.nuget.org/packages/AspNetWebApi.SelfHost/">ASP.NET Web API Self Host</a> paketi Nuget Ã¼zerinden kurulur.</li>
  <li>OnStart bÃ¶lÃ¼mÃ¼ aÅŸaÄŸÄ±daki ÅŸekilde gÃ¼ncellenerek Web APIâ€™nin ayaÄŸa kalkmasÄ± saÄŸlanÄ±r;</li>
</ul>

<pre><code class="language-csharp">

private HttpSelfHostServer server;
private HttpSelfHostConfiguration config;

protected override void OnStart(string[] args)
{
    config = new HttpSelfHostConfiguration("http://localhost:9191");
    config.Routes.MapHttpRoute(
        "DefaultApi",
        "api/{controller}/{action}"
    );
    config.Formatters.Remove(config.Formatters.XmlFormatter);

    server = new HttpSelfHostServer(config);
    server.OpenAsync().Wait();
}
</code></pre>

<ul>
  <li>OnStop metodu aÅŸaÄŸÄ±daki ÅŸekilde gÃ¼ncellerek durdurma anÄ±nda Web APIâ€™nin de durmasÄ± saÄŸlanÄ±r;</li>
</ul>

<pre><code class="language-csharp">
protected override void OnStart(string[] args)
{
    server.CloseAsync().Wait();
    server.Dispose();
}
</code></pre>

<ul>
  <li>Bu adÄ±mdan sonra aÅŸaÄŸÄ±daki gibi Controller dosyalarÄ± oluÅŸturarak Web API geliÅŸtirebilirsiniz;</li>
</ul>

<pre><code class="language-csharp">
public class ServiceController: ApiController
{

    [HttpGet]
    public Dictionary&lt;string, dynamic&gt; Information()
    {
        return new Dictionary&lt;string, dynamic&gt;()
        {
            { "name", "MyService" },
        };
    }
}
</code></pre>

<ul>
  <li><code class="language-plaintext highlighter-rouge">installutil MyService.exe</code> komutu verilerek ilgili uygulamanÄ±n Hizmetler bÃ¶lÃ¼mÃ¼ne kaydÄ± gerÃ§ekleÅŸtirilir.</li>
  <li><code class="language-plaintext highlighter-rouge">installutil /u MyService.exe</code> komutu ile dilendiÄŸi zaman uygulamanÄ±n Hizmetler Ã¼zerindeki kaydÄ± silinir.</li>
</ul>

<h3 id="olasÄ±-hatalar">OlasÄ± Hatalar</h3>

<p>BaÄŸÄ±mlÄ±lÄ±ÄŸÄ± bulunan <code class="language-plaintext highlighter-rouge">Newtonsoft.Json</code> paketinin sÃ¼rÃ¼mÃ¼ biraz olarak geliyor. Ben derleme aÅŸamasÄ±nda bu nedenle ciddi sÄ±kÄ±ntÄ±lar yaÅŸadÄ±m. <code class="language-plaintext highlighter-rouge">Newtonsoft.Json</code> paketinin sÃ¼rÃ¼mÃ¼ yÃ¼kselttiÄŸinizde olasÄ± sorunlarÄ± ortadan kaldÄ±rabilirsiniz.</p>

<h3 id="sonuÃ§">SonuÃ§</h3>

<p>Her ne kadar Windowsâ€™u sevmesem de, iÅŸim gereÄŸi bu tarz geliÅŸtirmeler yapmak zorunda kalabiliyorum. EÄŸer olur da Windows Ã¼zerinde bir hizmet olarak Web API Ã§alÄ±ÅŸtÄ±rmak isterseniz, bu yÃ¶ntemi kullanabilirsiniz.</p>
:ET