I"~<p>Genellikle birçok projemizde bir yönlendirme (link) yapısına ihtiyacımız olur. Bunu kimi zaman <code class="language-plaintext highlighter-rouge">.htaccess</code> dosyalarıyla çözeriz, kimi zaman da doğrudan <strong>PHP</strong> dosyalarının adını linkmiş gibi veririz. Fakat tüm bunlar amatör işi çözümlerdir.</p>

<p>Yeni bir projeye başlayacaksanız mutlaka <strong>framework</strong> kullanın. Eğer illa kendinize bir framework yazmak istiyorsanız, olabildiğince hazır çözümlerden yararlanın. Bu yazımızda projelerinizde ya da eğer yazacak kadar deliyseniz kendi frameworkünüzde kullanabileceğiniz bir paketi tanıtacağım; <a href="https://github.com/symfony/Routing">Symfony/Routing</a>.</p>

<h2 id="kimler-kullanıyor">Kimler Kullanıyor?</h2>

<p>Bu paket <strong>Symfony Framework</strong>‘ü için geliştirilmiştir. Ancak o kadar güçlü bir tasarıma sahiptir ki; başka frameworkler de bu paketi yönlendirme işlemleri için kullanmaktadır. Bu frameworkler arasında oldukça tanıdık bir isim daha var; <strong>Laravel</strong>.</p>

<h2 id="nasıl-kullanacağım">Nasıl Kullanacağım?</h2>

<p>Paketi kullanmanın en iyi yolu, paketi <strong>Composer</strong> ile birlikte projenize dahil etmektir;</p>

<pre><code class="language-javascript">
{
    "require": {
        "symfony/routing": "3.0.*@dev",
        "symfony/http-foundation": "3.0.*@dev"
    }
}
</code></pre>

<p>Bu işlemden sonra <code class="language-plaintext highlighter-rouge">composer update</code> komutunu kullanarak bağımlılıkların projenize dahil olmasını sağlayabilirsiniz.</p>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">http-foundation</code> benim vereceğim örnekte kullanılacağı için ben dahil ettim. Bu paket yalnızca benim işlerimi biraz daha kolaylaştırmaktır.</p>
</blockquote>

<h2 id="örnek-kullanım">Örnek Kullanım</h2>

<p><strong>Symfony/Routing</strong> paketi temel olarak aşağıdaki 3 adımda çalışmaktadır;</p>

<ul>
  <li>Rota koleksiyonu (RouteCollection) oluşturulur.</li>
  <li>Rotalar uygulama içerisinden koleksiyona aktarılır.</li>
  <li>Mevcut kullanıcı isteği rota koleksiyonunda var mı kontrol edilir, yoksa exception fırlatılır.</li>
</ul>

<h3 id="koleksiyon-oluşturma">Koleksiyon Oluşturma</h3>

<p>Aşağıda koleksiyon oluşturma işlemini görebilirsiniz;</p>

<pre><code class="language-php">
// Sınıflar çağırılır
use Symfony\Component\Routing\RouteCollection;

// Koleksiyon oluşturma işlemi
$routes = new RouteCollection();
</code></pre>

<h3 id="rota-tanımlama">Rota Tanımlama</h3>

<p>Bu adımdan sonra rotalarımızı tutacağımız koleksiyonumuz artık hazırdır. Bundan sonra rotaları aşağıdaki gibi ekleyebiliriz;</p>

<pre><code class="language-php">
// Sınıflar çağırılır
use Symfony\Component\Routing\RouteCollection;
use Symfony\Component\Routing\Route;

// Koleksiyon oluşturma işlemi
$routes = new RouteCollection();

// Yeni bir rota oluşturulur
$route = new Route('/welcome', ['controller' =&gt; 'WelcomeController']);
// Rota koleksiyona dahil edilir.
$routes-&gt;add('welcome', $route);
</code></pre>

<p>Rota oluşturmak işlemini kısaltmak için aşağıdaki gibi kullanmanız da mümkündür;</p>

<pre><code class="language-php">
// Rota oluşturulur ve koleksiyona dahil edilir.
$routes-&gt;add('welcome', new Route('/welcome', ['controller' =&gt; 'WelcomeController']));
</code></pre>

<h3 id="rota-kontrolü">Rota Kontrolü</h3>

<p>Rota kontrolü için kullanıcı hangi url’yi çağırıyor kontrol ettirmemiz gerekmektedir. Bunu birçok farklı yol izleyerek yapabilirsiniz. Ancak amacımız az kodla çok iş yapmak olduğundan, Symfony tarafından hazırlanan <a href="https://github.com/symfony/HttpFoundation">HttpFoundation</a> paketindeki <code class="language-plaintext highlighter-rouge">Request</code> sınıfını kullanmamız yerinde bir tercih olacaktır.</p>

<pre><code class="language-php">
// Sınıflar çağırılır
use Symfony\Component\Routing\RouteCollection;
use Symfony\Component\Routing\Route;
use Symfony\Component\Routing\RequestContext;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\Routing\Matcher\UrlMatcher;

// Koleksiyon oluşturma işlemi
$routes = new RouteCollection();

// Yeni bir rota oluşturulur
$route = new Route('/welcome', ['controller' =&gt; 'WelcomeController']);
// Rota koleksiyona dahil edilir.
$routes-&gt;add('welcome', $route);

// Yeni bir istek nesnesi oluşturulur
$context = new RequestContext();
// Bu nesnenin içeriği Request sınıfı ile doldurulur
$context = $context-&gt;fromRequest(Request::createFromGlobals());		
// Url Karşılaştırma sınıfı oluşturulur
$matcher = new UrlMatcher($routes, $context);
// Mevcut url karşılaştırılır
try {
	$parameters = $matcher-&gt;match($context-&gt;getPathInfo());
} catch (ResourceNotFoundException $e) {
	echo '404!';
}
</code></pre>

<p>Bu işlem rota karşılaştırma işlemidir. Son satırda eğer rota varsa rota tanımlama aşamasında kaydedilen parametreler bize geri döner. Eğer yoksa bir Exception fırlatılır; <code class="language-plaintext highlighter-rouge">ResourceNotFoundException</code>. Biz de try-catch blogu ile bu hatayı yaklayamaya çalışıyoruz.</p>

<p>Hepsi bu kadar. Yalnızca dakikalar içerisinde oldukça kullanışlı bir yönlendirme işlemimiz oldu. Ancak bu makalede anlatılanlar Routing paketinin son derece yalın bir kullanımıdır. Aşağıdaki kaynaklardan daha detaylı bilgiler edinebilirsiniz;</p>

<ul>
  <li><a href="https://packagist.org/packages/symfony/routing">Symfony/Routing</a></li>
  <li><a href="https://packagist.org/packages/symfony/http-foundation">Symfony/HttpFoundation</a></li>
  <li><a href="http://api.symfony.com/2.3/Symfony/Component/Routing.html">Symfony Routing API</a></li>
  <li><a href="http://api.symfony.com/2.3/Symfony/Component/HttpFoundation.html">Symfony HttpFoundation API</a></li>
</ul>

:ET