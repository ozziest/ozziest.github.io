I"È<p><a href="https://pixabay.com/en/rocket-launch-rocket-take-off-nasa-67643/" target="_blank">
    <img src="/images/posts/coding.jpg" class="center" />
</a></p>

<p><strong><a href="http://en.wikipedia.org/wiki/Cyclomatic_complexity">Cyclomatic Complexity</a></strong> kavramÄ± yazÄ±lÄ±m camiasÄ±na ait bir terimdir ve geliÅŸtirilen kodlarÄ±n karmaÅŸasÄ±nÄ±n Ã¶lÃ§Ã¼lmesi olarak ifade edilir. Ã–lÃ§Ã¼m yapÄ±lÄ±rken akÄ±ÅŸ diyagramÄ±ndaki baÄŸÄ±msÄ±z bÃ¶lÃ¼mler ve karar yapÄ±larÄ± gÃ¶z Ã¶nÃ¼nde bulundurulur. Ne kadar Ã§ok karar yapÄ±sÄ± bulunuyorsa, kod karmaÅŸasÄ± o kadar artÄ±k. Kod karmaÅŸasÄ±nÄ±n arttÄ±ÄŸÄ± durumlarda Ã¼zerinde Ã§alÄ±ÅŸÄ±lan projenin sÃ¼rdÃ¼rÃ¼lebilir olmasÄ± gÃ¼Ã§leÅŸir, hata ile karÅŸÄ±laÅŸma oranÄ±nda artÄ±ÅŸ gÃ¶zlemlenir. Bu nedenle kod karmaÅŸasÄ±nÄ±n minumumda tutulmasÄ± her zaman iÃ§in Ã¶nerilir.</p>

<h2 id="nasÄ±l-Ã¶lÃ§Ã¼lÃ¼r">NasÄ±l Ã–lÃ§Ã¼lÃ¼r?</h2>

<p>Bu Ã¶lÃ§Ã¼mÃ¼ yapan ve teorinin formÃ¼llerine baÄŸlÄ± olarak Ã§alÄ±ÅŸan hazÄ±r araÃ§lar vardÄ±r. Ben aÄŸÄ±rlÄ±klÄ± olarak PHP tarafÄ±nda kod geliÅŸtiren bir geliÅŸtirici olduÄŸum iÃ§in bu iÅŸi yapan ve yanÄ±nda baÅŸka raporlamar da gerÃ§ekleÅŸtiren <a href="https://github.com/sebastianbergmann/phploc">PHPLOC</a> isimli bir araÃ§ kullanÄ±yorum. Kendisi <a href="https://github.com/sebastianbergmann/phpunit">PHPUnit</a>â€˜i de geliÅŸtiren <a href="https://github.com/sebastianbergmann">Sebastian Bergmann</a> tarafÄ±ndan geliÅŸtirilmiÅŸ bir araÃ§.</p>

<h2 id="phploc-kurulumu">PHPLOC Kurulumu</h2>

<p>AÅŸaÄŸÄ±daki adÄ±mlarÄ± izleyerek kurulumu gerÃ§ekleÅŸtirebilirsiniz.</p>

<pre><code class="language-bash">
$Â wget https://phar.phpunit.de/phploc.phar
$ chmod +x phploc.phar
$ mv phploc.phar /usr/local/bin/phploc
</code></pre>

<h2 id="kullanÄ±m">KullanÄ±m</h2>

<p>Proje dosyalarÄ±nÄ±zÄ±n bulunduÄŸu klasÃ¶rÃ¼ parametre olarak gÃ¶ndererek sonuÃ§larÄ± incleyebilirsiniz;</p>

<pre><code class="language-bash">
$ phploc src

phploc 2.0.4 by Sebastian Bergmann.

Directories                                          3
Files                                                8

Size
  Lines of Code (LOC)                             1858
  Comment Lines of Code (CLOC)                     560 (30.14%)
  Non-Comment Lines of Code (NCLOC)               1298 (69.86%)
  Logical Lines of Code (LLOC)                     289 (15.55%)
    Classes                                        260 (89.97%)
      Average Class Length                          37
      Average Method Length                          9
    Functions                                        5 (1.73%)
      Average Function Length                        5
    Not in classes or functions                     24 (8.30%)

Complexity
  Cyclomatic Complexity / LLOC                    0.67
  Cyclomatic Complexity / Number of Methods       7.86

Dependencies
  Global Accesses                                    2
    Global Constants                                 2 (100.00%)
    Global Variables                                 0 (0.00%)
    Super-Global Variables                           0 (0.00%)
  Attribute Accesses                                48
    Non-Static                                      48 (100.00%)
    Static                                           0 (0.00%)
  Method Calls                                      96
    Non-Static                                      91 (94.79%)
    Static                                           5 (5.21%)

Structure
  Namespaces                                         4
  Interfaces                                         0
  Traits                                             0
  Classes                                            7
    Abstract Classes                                 0 (0.00%)
    Concrete Classes                                 7 (100.00%)
  Methods                                           28
    Scope
      Non-Static Methods                            28 (100.00%)
      Static Methods                                 0 (0.00%)
    Visibility
      Public Method                                 10 (35.71%)
      Non-Public Methods                            18 (64.29%)
  Functions                                          1
    Named Functions                                  0 (0.00%)
    Anonymous Functions                              1 (100.00%)
  Constants                                          1
    Global Constants                                 1 (100.00%)
    Class Constants                                  0 (0.00%)
</code></pre>

<h2 id="yorumlama">Yorumlama</h2>

<p>GÃ¶sterilen sonuÃ§lar arasÄ±nda yer alan <strong>Complexity</strong> bÃ¶lÃ¼mÃ¼nde sayÄ±sal deÄŸerler gÃ¶receksiniz. Bunlar koda ve metotlara gÃ¶re kod karmaÅŸasÄ±nÄ± gÃ¶steren deÄŸerlerdir. AÅŸaÄŸÄ±daki listeye gÃ¶re kodunuzun karmaÅŸasÄ±nÄ± saptayabilirsiniz;</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">0-10</code>: Basit kod yapÄ±sÄ±, yÃ¼ksek sÃ¼rdÃ¼rÃ¼lebilirlik.</li>
  <li><code class="language-plaintext highlighter-rouge">11-20</code>: Kabul edilebilir karmaÅŸÄ±klÄ±k, orta sÃ¼rdÃ¼rÃ¼lebilirlik.</li>
  <li><code class="language-plaintext highlighter-rouge">21-50</code>: YÃ¼ksek karmaÅŸÄ±klÄ±k, dÃ¼ÅŸÃ¼k sÃ¼rdÃ¼rÃ¼lebilirlik.</li>
  <li><code class="language-plaintext highlighter-rouge">50-100</code>: Test adilemez, Ã§ok dÃ¼ÅŸÃ¼k sÃ¼rdÃ¼rÃ¼lebilirlik.</li>
  <li><code class="language-plaintext highlighter-rouge">&gt;100</code>: Felaket</li>
</ul>

<h2 id="karmaÅŸÄ±klÄ±ÄŸÄ±-azaltma">KarmaÅŸÄ±klÄ±ÄŸÄ± Azaltma</h2>

<p>KarmaÅŸÄ±klÄ±k bir Ã§ok farklÄ± faktÃ¶re baÄŸlÄ± olsa da, genel olarak aÅŸaÄŸÄ±daki adÄ±mlar uygulanarak azaltÄ±labilir;</p>

<ul>
  <li><a href="http://en.wikipedia.org/wiki/SOLID_%28object-oriented_design%29">SOLID Prensipleri</a>â€˜ne uygun kod geliÅŸtirmek.</li>
  <li><a href="http://en.wikipedia.org/wiki/Software_design_pattern">TasarÄ±m Desenleri</a>â€˜ni aktif kullanmak.</li>
  <li><a href="http://en.wikipedia.org/wiki/KISS_principle">Basit TasarÄ±m</a>â€˜dan yana olmak.</li>
  <li>Bol bol <a href="http://en.wikipedia.org/wiki/Code_refactoring">Refactoring</a> yapmak.</li>
</ul>

:ET