I"õ<p>Try-Catch bloklarÄ±nÄ± kullanarak hata yakalama sÃ¼recine aÅŸina olduÄŸunuzu varsayÄ±yorum. EÄŸer deÄŸilseniz <a href="https://web.archive.org/web/20140906095623/http://php.net/manual/en/language.exceptions.php">buradan</a> temel bilgileri edinebilirsiniz. YazÄ± boyunca SOLID prensiplerinden Single Responsibility (Tek Sorumluluk) prensibine de deÄŸineceÄŸim. EÄŸer bu konuda da Ã¶n bilginiz yoksa <a href="https://web.archive.org/web/20140920213104/http://code.tutsplus.com/tutorials/solid-part-1-the-single-responsibility-principle--net-36074">buradan</a> faydalanabilirsiniz.</p>

<p>SOLID prensiplerini yazdÄ±ÄŸÄ±m her kod Ã¼zerinde istisnasÄ±z olarak uygulamak istiyorum. Bu nedenle epey dikkatli Ã§alÄ±ÅŸÄ±yorum. Ã–zellikle metotlarÄ±mÄ±n tek sorumluluk prensibine gÃ¶re yazÄ±ldÄ±ÄŸÄ±na Ã¶nem gÃ¶steriyorum. Bu, bir Ã§ok iÅŸi yapan metotlarÄ± parÃ§alara bÃ¶lmemi gerektiriyor. Ancak muhakkak bir noktadan sonra parÃ§alara bÃ¶lÃ¼nen metotlarÄ± Ã§aÄŸÄ±rdÄ±ÄŸÄ±m bir Ã¶n metot olmasÄ± gerekiyor. Bir kullanÄ±cÄ± kayÄ±t iÅŸlemini ele alÄ±rsak genel olarak metotlar bu ÅŸekilde oluÅŸuyor;</p>

<pre><code class="language-php">
class UserInsertController
{
 
    public function provider()
    {
        $this-&gt;validation();
        $this-&gt;insert();
        $this-&gt;email();
    }
 
    private function validation()
    {
        // Form doÄŸrulamasÄ±
    }
 
    private function insert()
    {
        // Kaydetme iÅŸlemi
    }
 
    private function email()
    {
        // KullanÄ±cÄ±ya e-posta gÃ¶nderimi
    }
 
}
</code></pre>

<p>Bu tÃ¼r bir yapÄ± kurduÄŸunuzda tek sorumluluk ilkesini uygulamÄ±ÅŸ oluyorsunuz. Ancak Ã§aÄŸÄ±rdÄ±ÄŸÄ±nÄ±z alt metotlarda oluÅŸacak bir hatada bir sonraki adÄ±ma devam etmeden ilgili hatayÄ± kullanÄ±cÄ±ya gÃ¶stermeniz gerekiyor. Bu tÃ¼r durumlarda genel itibariyle bir Ã§ok developer (eskiden ben de buna dahildim) bir metotun iÅŸini sorunsuz yapÄ±p yapmadÄ±ÄŸÄ±nÄ± anlamak iÃ§in true-false gibi bir deÄŸer dÃ¶ndÃ¼rmesini bekliyor. Bu yÃ¶ntemi kullandÄ±ÄŸÄ±nÄ±zda ciddi bir kod karmaÅŸasÄ± ortaya Ã§Ä±kÄ±yor. TÄ±pkÄ± aÅŸaÄŸÄ±daki gibi;</p>

<pre><code class="language-php">
class UserInsertController
{
 
    public function provider()
    {
        $result = $this-&gt;validation();        
        if (!$result) return false;
        
        $result = $this-&gt;insert();        
        if (!$result) return false;
        
        $result = $this-&gt;email();        
        if (!$result) return false;
        
    }
 
    private function validation()
    {
        // Form doÄŸrulamasÄ±
        return true;
    }
 
    private function insert()
    {
        // Kaydetme iÅŸlemi
        return true;
    }
 
    private function email()
    {
        // KullanÄ±cÄ±ya e-posta gÃ¶nderimi
        return true;
    }
 
}
</code></pre>

<p>Bu kodun zararsÄ±z olduÄŸunu dÃ¼ÅŸÃ¼nebilirsiniz. Ancak bu yapÄ± Ã§ok tehlikelidir ve Ã§ok adÄ±m gerektiren ve birden fazla durumu barÄ±ndÄ±ran iÅŸlerde ortalÄ±k karÄ±ÅŸabilir. Ã–rneÄŸin validasyon iÅŸleminde ne tÃ¼r bir hata var bilmiyoruz. Bunu Ã¶ÄŸrenmek iÃ§in ayrÄ±ca hatayÄ± da kontrol etmemiz gerekir. Lakin try-catch yapÄ±sÄ± bu durumlar iÃ§in idealdir;</p>

<pre><code class="language-php">
class UserInsertController
{
 
    public function provider()
    {
        try {
            $this-&gt;validation();
            $this-&gt;insert();
            $this-&gt;email();            
        } catch (Exception $e) {
            echo $e-&gt;getMessage();
        }
    }
 
    private function validation()
    {
        // Form doÄŸrulamasÄ±
        if ($email === '') {
            throw new Exception('E-posta adresi zorunlu.');
        }
    }
 
    private function insert()
    {
        // Kaydetme iÅŸlemi
    }
 
    private function email()
    {
        // KullanÄ±cÄ±ya e-posta gÃ¶nderimi
    }
 
}
</code></pre>

<p>Bu yapÄ±ya baktÄ±ÄŸÄ±nÄ±zda tek sorumluluk ilkesini hem uyguladÄ±ÄŸÄ±mÄ±zÄ± hem de kod karmaÅŸasÄ±nÄ± engellediÄŸimizi gÃ¶rÃ¼yoruz. AyrÄ±ca hata durumunda diÄŸer iÅŸlemler de otomatik olarak duruyor. Hata mesajÄ±nÄ± da sorunsuz bir ÅŸekilde alabiliyoruz. provider metodumuz iÃ§erisinde bir Ã¼st tarafa da hatayÄ± bildirebilirdik. BÃ¶ylece her bÃ¶lÃ¼m tamamen birbirinden baÄŸÄ±msÄ±z olarak Ã§alÄ±ÅŸmÄ±ÅŸ olurdu. Bu yapÄ±da hiÃ§ bir metot baÅŸka bir yerde oluÅŸan hayatÄ± kontrol etmek zorunda kalmaz.</p>

:ET